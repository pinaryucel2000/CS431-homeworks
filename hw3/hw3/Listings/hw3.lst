C51 COMPILER V9.60.0.0   HW3                                                               11/12/2021 17:57:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HW3
OBJECT MODULE PLACED IN .\Objects\hw3.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hw3.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\hw3.l
                    -st) TABS(2) OBJECT(.\Objects\hw3.obj)

line level    source

   1          #include <REG51.H>
   2          #include <inttypes.h>
   3          #include "stdio.h"
   4          #include <string.h>
   5          #include <stdlib.h>
   6          
   7          #define L 204
   8          #define S 102
   9          #define MAX_BUFFER_SIZE 4
  10          #define SYS_CLOCK 29.4912
  11          #define TR_CLOCK 2.4576 // SYS_CLOCK / 12 (MHz)
  12          #define STEP 0.0004069 // 1 / TR_CLOCK(Hz) (ms) 
  13          
  14          
  15          // These variables are calculated before the delay function
  16          // is called to have a more optimized delay function.
  17          uint16_t TL0_value;
  18          uint16_t TH0_value;
  19          
  20          char buffer[MAX_BUFFER_SIZE];
  21          char flash_buffer[MAX_BUFFER_SIZE];
  22          uint16_t buffer_size = 0;
  23          uint16_t flash_buffer_size = 0;
  24          
  25          uint8_t morse_lookup[10][4] =  {{'S', 'S', 'S', 'S'}, // 0
  26                                          {'L', 'S', 'S', 'S'}, // 1
  27                                          {'S', 'L', 'S', 'S'}, // 2
  28                                          {'S', 'S', 'L', 'S'}, // 3
  29                                          {'S', 'S', 'S', 'L'}, // 4
  30                                          {'L', 'S', 'S', 'L'}, // 5
  31                                          {'S', 'L', 'S', 'L'}, // 6
  32                                          {'S', 'S', 'L', 'L'}, // 7
  33                                          {'L', 'S', 'L', 'L'}, // 8
  34                                          {'S', 'L', 'L', 'L'}  // 9
  35                                         };
  36          
  37          void delay(uint16_t max); 
  38          void append_buffer(char value);         
  39          uint16_t is_valid(char value);        
  40          void print_buffer();        
  41          void flash_char(char value);  
  42          void flash_long();
  43          void flash_short();   
  44          void flash_string(char* value);         
  45          void set_timer_values(uint16_t delay);
  46          void delay_with_timer(); // delay amount is determined by set_timer_values before this function is called 
             -                             
  47          
  48          
  49          void main (void){
  50   1        uint16_t fi = 0;
  51   1        char last_input = '\0';
  52   1        SCON  = 0x50;                   /* SCON: mode 1, 8-bit UART, enable rcvr    */
  53   1        TMOD |= 0x21;                   /* TMOD: timer 1, mode 2, timer 0, mode 1   */
C51 COMPILER V9.60.0.0   HW3                                                               11/12/2021 17:57:23 PAGE 2   

  54   1        TH1   = 0xfc;                   /* TH1:  252                                */
  55   1        TR1   = 1;                      /* TR1:  timer 1 run                        */
  56   1        TI    = 1;                      /* TI:   set TI to send first char of UART  */  
  57   1        P0 = 00000000;
  58   1        
  59   1        set_timer_values(20);
  60   1      
  61   1      
  62   1        // 6. Demonstrate you can report back to serial when you cancel flashing strings; i.e. when a new sequen
             -ce is entered before flashing a new one is finished.
  63   1        // 7. Connect it all together, and demonstrate full functionality. i.e. demonstrate you can cancel flash
             -ing of sequences and handle other test cases. 
  64   1        while(1){
  65   2          while (!RI){
  66   3            if(fi < flash_buffer_size){
  67   4              flash_char(flash_buffer[fi]);
  68   4              fi++;
  69   4            }
  70   3              
  71   3            if(fi != 0 && fi == flash_buffer_size){
  72   4              printf("String flashing has ended.\n");
  73   4              fi = 0;
  74   4              flash_buffer_size = 0;
  75   4            }
  76   3          }
  77   2          
  78   2          last_input = SBUF;
  79   2          RI = 0;
  80   2          printf("%c", last_input);
  81   2          
  82   2          if(last_input != '\n'){
  83   3            append_buffer(last_input);
  84   3          }
  85   2          else {
  86   3            printf("%c", buffer[0]);  
  87   3            printf("%c", buffer[1]);  
  88   3            printf("%c", buffer[2]);  
  89   3            printf("%c", buffer[3]);  
  90   3            if(fi != flash_buffer_size){
  91   4                printf("String flashing has been cancelled.\n");
  92   4            }
  93   3            
  94   3            for(fi = 0; fi < buffer_size; fi++){
  95   4              flash_buffer[fi] = buffer[fi];
  96   4            }   
  97   3            
  98   3            flash_buffer_size = buffer_size;
  99   3            buffer_size = 0;
 100   3            fi = 0;
 101   3          }
 102   2          
 103   2        }
 104   1      
 105   1      
 106   1        while(1){
 107   2          printf("Send characters. ");
 108   2          last_input = '\0';
 109   2          
 110   2          // 1. Demonstrate you are able to receive chars by echoing them back.
 111   2          while(last_input != '\n'){
 112   3            last_input = _getkey();
 113   3            printf("%c", last_input);   
C51 COMPILER V9.60.0.0   HW3                                                               11/12/2021 17:57:23 PAGE 3   

 114   3            append_buffer(last_input);
 115   3          }
 116   2          
 117   2          // 2. Demonstrate you are able to save sequences by printing them back when enter is pressed. 
 118   2          printf("\nSequence: ");   
 119   2          print_buffer(); 
 120   2          
 121   2          // 3. Demonstrate you are able to flash certain hard-coded chars. 
 122   2          flash_char('1');
 123   2          delay(100);
 124   2          flash_char('2');
 125   2          delay(100);
 126   2          
 127   2          // 4. Demonstrate you are able to flash hard-coded strings.
 128   2          // 5. Demonstrate you can report back to serial when you finish flashing strings.
 129   2          flash_string("h1e2l3l4e");
 130   2          
 131   2        }
 132   1      }
 133          
 134          void flash_string(char* value){
 135   1        uint16_t i;
 136   1        
 137   1        for(i = 0; i < strlen(value); i++){
 138   2          flash_char(value[i]);
 139   2          delay(50);
 140   2        }
 141   1        
 142   1        printf("String flashing has ended.");
 143   1      } 
 144          
 145          
 146          void flash_long(){
 147   1        P1 = L;
 148   1        delay(20);
 149   1        P1 = 0;
 150   1        delay(20);
 151   1      }
 152          
 153          void flash_short(){
 154   1        P1 = S;
 155   1        delay(20);
 156   1        P1 = 0;
 157   1        delay(20);
 158   1      } 
 159          
 160          void flash_char(char value){
 161   1        uint16_t index;
 162   1        uint16_t i; 
 163   1        
 164   1        if(is_valid(value) == 0){
 165   2          return;
 166   2        }
 167   1        
 168   1        index = atoi(&value);
 169   1        
 170   1        for(i = 0 ; i < 4; i++){
 171   2          if(morse_lookup[index][i] == 'S'){
 172   3            flash_short();
 173   3          }
 174   2          else{
 175   3            flash_long();
C51 COMPILER V9.60.0.0   HW3                                                               11/12/2021 17:57:23 PAGE 4   

 176   3          }
 177   2        }
 178   1        
 179   1      }
 180          
 181          void print_buffer(){
 182   1        uint16_t i; 
 183   1        
 184   1        for(i = 0; i < buffer_size; i++){
 185   2          printf("%c", buffer[i]); 
 186   2        }
 187   1      }
 188          
 189          void append_buffer(char value){
 190   1        uint16_t i; 
 191   1        
 192   1        if(is_valid(value) == 0){
 193   2          return;
 194   2        }
 195   1        
 196   1        if(buffer_size + 1 <= MAX_BUFFER_SIZE){
 197   2          buffer[buffer_size] = value;
 198   2          buffer_size++;
 199   2        }
 200   1        else{
 201   2          for(i = 0; i < MAX_BUFFER_SIZE - 1; i++){
 202   3            buffer[i] = buffer[i+1];
 203   3          }
 204   2          
 205   2          buffer[buffer_size - 1] = value;
 206   2        }
 207   1          
 208   1      }
 209          
 210          uint16_t is_valid(char value){
 211   1        if(value != '0' && value != '1' && value != '2' && value != '3' && value != '4' && value != '5' && value 
             -!= '6' && value != '7' && value != '8' && value != '9'){
 212   2          return 0;
 213   2        }
 214   1        else{
 215   2          return 1;
 216   2        }
 217   1      }
 218          
 219          void delay(uint16_t max){
 220   1        uint16_t i;
 221   1        
 222   1        for(i = 0; i < max; i++){}
 223   1      }
 224          
 225          void set_timer_values(uint16_t delay){
 226   1        float value = 65536 - delay / STEP; // Should be greater than 0
 227   1        TL0_value = ((uint16_t)value & 0x00ff);
 228   1        TH0_value = ((uint16_t)value & 0xff00) >> 8;
 229   1      }
 230          
 231          // delay_time is in milliseconds
 232          void delay_with_timer(){
 233   1        TL0 = TL0_value;
 234   1        TH0 = TH0_value;
 235   1        TR0 = 1;
 236   1        while(TF0 == 0){};
C51 COMPILER V9.60.0.0   HW3                                                               11/12/2021 17:57:23 PAGE 5   

 237   1        TR0 = 0;
 238   1        TF0 = 0;
 239   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    707    ----
   CONSTANT SIZE    =    135    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     56      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
